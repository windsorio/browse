{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "browse",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#rule"
    }
  ],
  "repository": {
    "expr": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#number"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#ruleset"
        }
      ]
    },
    "parens": {
      "begin": "\\s*\\(",
      "end": "\\)",
      "contentName": "meta.parens.browse",
      "patterns": [
        {
          "include": "#rule"
        },
        {
          "include": "#expr"
        }
      ]
    },
    "rule": {
      "begin": "\\s*(?:([a-zA-Z_@][a-zA-Z_@\\$\\d]*):)?([a-zA-Z_@][a-zA-Z_@\\$\\d]*)(\\?)?",
      "end": ";?",
      "applyEndPatternLast": 1,
      "comment": "Anything at all will let the rule end. This is intentional",
      "captures": {
        "1": {
          "name": "support.class.browse"
        },
        "2": {
          "name": "entity.name.function.browse",
          "patterns": [
            {
              "include": "#builtins"
            }
          ]
        },
        "3": {
          "name": "keyword.operator.browse"
        }
      },
      "patterns": [
        {
          "include": "#options"
        },
        {
          "include": "#expr"
        }
      ]
    },
    "options": {
      "begin": "\\(",
      "end": "\\)",
      "name": "meta.options.browse",
      "patterns": [
        {
          "match": "\\s*(\\!)?([a-zA-Z_@][a-zA-Z_@\\$\\d]*)(?=(\\)|\\s))",
          "name": "variable.parameter.browse",
          "captures": {
            "1": { "name": "keyword.operator.browse" },
            "3": { "name": "keyword.operator.browse" }
          }
        },
        {
          "begin": "\\s*([a-zA-Z_@][a-zA-Z_@\\$\\d]*)(=)",
          "beginCaptures": {
            "1": { "name": "variable.parameter.browse" },
            "2": { "name": "keyword.operator.browse" }
          },
          "end": "(?<!=)",
          "patterns": [
            {
              "include": "#expr"
            }
          ]
        }
      ]
    },
    "ruleset": {
      "begin": "\\s*{",
      "end": "}",
      "contentName": "meta.block.browse",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#rule"
        }
      ]
    },
    "operators": {
      "name": "keyword.operator.browse",
      "match": "\\s*(\\!|-|\\*|/|%|\\+|>=|<=|>|<|\\!=|==|&&|\\|\\|)"
    },
    "builtins": {
      "patterns": [
        {
          "name": "keyword.control.browse",
          "match": "\\b(?<![_@])(if|for|return|throw|match)(?![_@\\$])\\b"
        },
        {
          "name": "storage.type.browse",
          "match": "\\b(?<![_@])(get|arr_get|dict_get|set|arr_set|dict_set|unset|dict_unset|update|rule|bind|arr|dict)(?![_@\\$])\\b"
        },
        {
          "name": "keyword.other.browse",
          "match": "\\b(?<![_@])(import)(?![_@\\$])\\b"
        },
        {
          "name": "support.class.browse",
          "match": "\\b(?<![_@])(scope|id|push|pop|sleep|print|eval|string|len)(?![_@\\$])\\b"
        }
      ]
    },

    "literals": {
      "name": "constant.language.browse",
      "match": "\\s*\\b(nil|true|false)\\b"
    },
    "number": {
      "name": "constant.numeric.browse",
      "match": "\\s*(\\d+\\.\\d*|\\.?\\d+)(e[+-]?\\d+)?"
    },

    "identifier": {
      "name": "variable.other.browse",
      "match": "\\s*\\$[a-zA-Z_@][a-zA-Z_@\\$\\d]*"
    },

    "strings": {
      "patterns": [
        {
          "include": "#dstrings"
        },
        {
          "include": "#sstrings"
        },
        {
          "include": "#cssselector"
        },
        {
          "include": "#multilinestring"
        },
        {
          "include": "#implicitstring"
        }
      ]
    },
    "dstrings": {
      "name": "string.quoted.single.browse",
      "begin": "\\s*'",
      "end": "'",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "sstrings": {
      "name": "string.quoted.double.browse",
      "begin": "\\s*\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "cssselector": {
      "name": "string.quoted.other.browse",
      "begin": "\\s*`",
      "end": "`",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "multilinestring": {
      "begin": "\\s*\\|(?!\\|)",
      "end": "\\|",
      "name": "string.quoted.other.browse",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "implicitstring": {
      "name": "string.unquoted.browse",
      "begin": "(?<!;)\\s*[a-zA-Z]",
      "end": "(?=[\\;\\(\\){}\\s])",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "escape": {
      "name": "constant.character.escape.browse",
      "match": "\\\\(u\\h{4}|x\\h{2}|\\d{2,3}|.)"
    },

    "comment": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.browse"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "comment.line.browse"
                }
              },
              "end": "\\n",
              "name": "comment.line.number-sign.browse"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.browse"
}
